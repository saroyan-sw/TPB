# -*- coding: utf-8 -*-
"""TBP (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i4Wrv5TEQDjWuXnT387IO8YDdDM7DagY
"""

import pandas as pd
import numpy as np

df = pd.read_csv('..\\data\\raw\\TBP.csv')
print(df)

t = np.arange(1, 2001).tolist() * 500
df['t'] = t

df['mass_centre_x'] = (df['r1_x'] + df['r2_x'] + df['r3_x']) / 3
df['mass_centre_y'] = (df['r1_y'] + df['r2_y'] + df['r3_y']) / 3
df['mass_centre_z'] = (df['r1_z'] + df['r2_z'] + df['r3_z']) / 3
df['mass_centre_vx'] = (df['v1_x'] + df['v2_x'] + df['v3_x']) / 3
df['mass_centre_ax'] = (df['a1_x'] + df['a2_x'] + df['a3_x']) / 3
df['mass_centre_vy'] = (df['v1_y'] + df['v2_y'] + df['v3_y']) / 3
df['mass_centre_ay'] = (df['a1_y'] + df['a2_y'] + df['a3_y']) / 3
df['mass_centre_vz'] = (df['v1_z'] + df['v2_z'] + df['v3_z']) / 3
df['mass_centre_az'] = (df['a1_z'] + df['a2_z'] + df['a3_z']) / 3
df['mass_centre_v'] = np.sqrt((df['mass_centre_vx']) ** 2 + (df['mass_centre_vy']) ** 2 + (df['mass_centre_vx']) ** 2)

df['target_x'] = np.nan

df['target_x'][0] = df['mass_centre_x'][1]


def update_target(m, n, df):
    """
    Update the 'n' column in a DataFrame based on the 'm' column.

    Parameters:
    - m (str): The column name whose values are used for updating.
    - n (str): The column name to be updated.
    - df (pd.DataFrame): The input DataFrame containing the specified columns.

    Returns:
    - None

    Example:
    ```python
    import pandas as pd
    import numpy as np

    # Assuming df is your DataFrame
    data = {'mass_centre_x': [1, 2, 3, 4, 5],
            'target_x': [0, 0, 0, 0, 0]}
    df = pd.DataFrame(data)

    # Call the update_target_x function
    update_target_x('mass_centre_x', 'target_x', df)
    ```

    This function iterates through the 'm' column in the provided DataFrame and updates the 'n' column. For every 2000th element in the iteration, the corresponding 'n' value is set to NaN. For other elements, 'n' is updated with the value from the next 'm' element.

    Parameters:
    - 'm' is the column name whose values are used for updating.
    - 'n' is the column name to be updated.
    - 'df' is the DataFrame containing the specified columns.

    Note:
    - The function updates the 'n' column in-place.
    - Make sure the DataFrame has the specified columns before calling this function.

    """
    for j in range((len(df[m].tolist()) - 1)):
        if (j + 1) % 2000 == 0:
            df[n][j] = np.nan
            continue
        df[n][j] = df[m][j + 1]
    return


update_target('target_x', 'mass_centre_x', df)

print(df['target_x'][1996])
print(df['target_x'][1997])
print(df['target_x'][1998])
print(df['target_x'][1999])

df_1d = df.loc[:, ['r1_x', 'r2_x', 'r3_x', 'v1_x', 'v2_x', 'v3_x', 'a1_x', 'a2_x',
                   'a3_x', 'mass_centre_x', 'mass_centre_vx', 'mass_centre_ax', 'target_x', 't']]

df_1d['a2_x'].fillna(0, inplace=True)
df_1d['a3_x'].fillna(0, inplace=True)
df_1d.isnull().any()

print(df_1d.corr())

"""## Y component"""

df['target_y'] = np.nan
df['target_y'][0] = df['mass_centre_y'][1]

for i in range((len(df['mass_centre_y'].tolist()) - 1)):
    if (i + 1) % 2000 == 0:
        df['target_y'][i] = np.nan
        continue
    df['target_y'][i] = df['mass_centre_y'][i + 1]

"""**Calculating Mass Center Acceleration and Velocity for 1d**"""

df['mass_centre_vy'] = (df['v1_y'] + df['v2_y'] + df['v3_y']) / 3
df['mass_centre_ay'] = (df['a1_y'] + df['a2_y'] + df['a3_y']) / 3

print(df['target_y'][1996])
print(df['target_y'][1997])
print(df['target_y'][1998])
print(df['target_y'][1999])

df_1d_y = df.loc[:,
          ['r1_y', 'r2_y', 'r3_y', 'v1_y', 'v2_y', 'v3_y', 'a1_y', 'a2_y', 'a3_y', 'mass_centre_y', 'mass_centre_vy',
           'mass_centre_ay', 'target_y', 't']]

df_1d_y['a2_y'].fillna(0, inplace=True)
df_1d_y['a3_y'].fillna(0, inplace=True)
print(df_1d_y.isnull().any())

print(df_1d_y.corr())

# Z component

df['target_z'] = np.nan
df['target_z'][0] = df['mass_centre_z'][1]


update_target('mass_centre_z', 'target_z', df)


print(df['target_z'][1996])
print(df['target_z'][1997])
print(df['target_z'][1998])
print(df['target_z'][1999])

df_1d_z = df.loc[:, ['r1_z', 'r2_z', 'r3_z', 'v1_z', 'v2_z', 'v3_z', 'a1_z', 'a2_z',
                     'a3_z', 'mass_centre_z', 'mass_centre_vz', 'mass_centre_az', 'target_z', 't']]

df_1d_z['a2_z'].fillna(0, inplace=True)
df_1d_z['a3_z'].fillna(0, inplace=True)
df_1d_z.isnull().any()

print(df_1d_z.corr())

"""# Visualizing Motion in 2d"""

df['mass_centre_r'] = np.sqrt((df['mass_centre_x'] ** 2) +
                              (df['mass_centre_y'] ** 2) + (df['mass_centre_z'] ** 2))
